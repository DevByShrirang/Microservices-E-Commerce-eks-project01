@Library('jenkins-shared-library') _

pipeline {
    agent any
    environment {
        ACCOUNT_ID = "442042505508"
        REGION = "us-east-2"
        GIT_EMAIL = "shrirang.patil1812@gmail.com"
        GIT_USER_NAME = "DevByShrirang"
        GIT_REPO_NAME = "Microservices-E-Commerce-eks-project01"
        SRC_DIR = "src"
        KUBE_DIR = "kubernetes-files"
    }

    stages {
        stage('Clean Workspace') {
            steps { cleanWs() }
        }

        stage('Checkout') {
            steps {
                git branch: 'master', url: "https://github.com/${GIT_USER_NAME}/${GIT_REPO_NAME}.git"
            }
        }

        stage('Build & Deploy All Services') {
            steps {
                script {
                    // Get all service directories dynamically from src/
                    def services = sh(script: "ls -1 ${SRC_DIR}", returnStdout: true).trim().split("\n")

                    for (s in services) {
                        // Build and push Docker image
                        buildAndPush(SERVICE_NAME: s, ACCOUNT_ID: env.ACCOUNT_ID, REGION: env.REGION)

                        // Dynamically find YAML file in kubernetes-files/<service>
                        def yamlFiles = sh(
                            script: "ls ${KUBE_DIR}/${s}/*.yaml || echo ''", 
                            returnStdout: true
                        ).trim().split("\n")

                        for (y in yamlFiles) {
                            def yamlName = y.tokenize('/').last()
                            updateManifest(
                                SERVICE_NAME: s,
                                ACCOUNT_ID: env.ACCOUNT_ID,
                                REPO_URL: "${env.ACCOUNT_ID}.dkr.ecr.${env.REGION}.amazonaws.com/${s}",
                                YAML_FILE: yamlName,
                                MANIFEST_DIR: "${KUBE_DIR}/${s}",
                                GIT_EMAIL: env.GIT_EMAIL,
                                GIT_USER: env.GIT_USER_NAME,
                                GIT_REPO: env.GIT_REPO_NAME
                            )
                        }
                    }
                }
            }
        }
    }
}
