@Library('jenkins-shared-library') _

pipeline {
    agent any
    environment {
        ACCOUNT_ID = "442042505508"
        REGION = "us-east-2"
        GIT_EMAIL = "shrirang.patil1812@gmail.com"
        GIT_USER_NAME = "DevByShrirang"
        GIT_REPO_NAME = "Microservices-E-Commerce-eks-project01"
    }

    stages {
        stage('Clean Workspace') {
            steps { cleanWs() }
        }

        stage('Checkout') {
            steps {
                git branch: 'master', url: "https://github.com/${GIT_USER_NAME}/${GIT_REPO_NAME}.git"
            }
        }

        stage('Build & Deploy All Services') {
            steps {
                script {
                    // Dynamically get all service names from src/ directory
                    def services = sh(script: "ls src", returnStdout: true).trim().split("\n")

                    for (s in services) {
                        echo "Processing service: ${s}"

                        // Build & push Docker image
                        buildAndPush(SERVICE_NAME: s, ACCOUNT_ID: env.ACCOUNT_ID, REGION: env.REGION)

                        // Update Kubernetes manifest if YAML exists
                        def yamlFiles = sh(script: "ls kubernetes-files/${s}/*.yaml 2>/dev/null || echo ''", returnStdout: true).trim()
                        if (yamlFiles) {
                            echo "Updating manifest for service: ${s}"
                            yamlFiles.split("\n").each { yamlFile ->
                                updateManifest(
                                    SERVICE_NAME: s,
                                    ACCOUNT_ID: env.ACCOUNT_ID,
                                    REPO_URL: "${env.ACCOUNT_ID}.dkr.ecr.${env.REGION}.amazonaws.com/${s}",
                                    YAML_FILE: yamlFile,
                                    GIT_EMAIL: env.GIT_EMAIL,
                                    GIT_USER: env.GIT_USER_NAME,
                                    GIT_REPO: env.GIT_REPO_NAME
                                )
                            }
                        } else {
                            echo "No YAML found for service: ${s}, skipping manifest update."
                        }
                    }
                }
            }
        }
    }
}
